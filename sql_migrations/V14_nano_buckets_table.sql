CREATE TABLE nano_buckets (
    bucket_id INTEGER CHECK (bucket_id >= 0 AND bucket_id <= 63),
    currency CHAR(3),
    nano_lower_bound NUMERIC,
    nano_upper_bound NUMERIC,
    fiat_lower_bound NUMERIC,
    fiat_upper_bound NUMERIC,
    PRIMARY KEY (bucket_id, currency)
);

-- Create an index on bucket_id and currency
CREATE INDEX idx_nano_buckets_bucket_currency ON nano_buckets(bucket_id, currency);

-- Create an index on currency alone for quick currency-based lookups
CREATE INDEX idx_nano_buckets_currency ON nano_buckets(currency);

-- Add a comment to explain the table's purpose
COMMENT ON TABLE nano_buckets IS 'Stores bucket ranges for nano and fiat currency amounts with 64 possible buckets per currency';
COMMENT ON COLUMN nano_buckets.bucket_id IS 'Bucket identifier (0-63)';
COMMENT ON COLUMN nano_buckets.currency IS 'Three-letter currency code';
COMMENT ON COLUMN nano_buckets.nano_lower_bound IS 'Lower bound of nano amount for this bucket';
COMMENT ON COLUMN nano_buckets.nano_upper_bound IS 'Upper bound of nano amount for this bucket';
COMMENT ON COLUMN nano_buckets.fiat_lower_bound IS 'Lower bound of fiat amount for this bucket';
COMMENT ON COLUMN nano_buckets.fiat_upper_bound IS 'Upper bound of fiat amount for this bucket';

-- Insert data for each currency
INSERT INTO nano_buckets (bucket_id, currency, nano_lower_bound, nano_upper_bound, fiat_lower_bound, fiat_upper_bound)
WITH currencies AS (
    SELECT unnest(ARRAY['AED', 'ARS', 'AUD', 'BRL', 'CHF', 'CNY', 'EUR', 'GBP', 'ILS', 'INR', 'JPY', 'MXN', 'NGN', 'TRY', 'USD', 'XAG', 'XAU', 'ZAR']) AS currency
),
bounds AS (
    SELECT 
        generate_series(0, 63) as bucket_id,
        unnest(ARRAY[
            -- Lower bounds
            '0',
            '604462909807314587353088',
            '309485009821345068724781056',
            '2630622583481433084160638976',
            '4951760157141521099596496896',
            '23520860746422225223083360256',
            '42089961335702929346570223616',
            '60659061924983633470057086976',
            '79228162514264337593543950336',
            '227780967228509970581438857216',
            '376333771942755603569333764096',
            '524886576657001236557228670976',
            '673439381371246869545123577856',
            '821992186085492502533018484736',
            '970544990799738135520913391616',
            '1119097795513983768508808298496',
            '1267650600228229401496703205376',
            '2456073037942194465399862460416',
            '3644495475656159529303021715456',
            '4832917913370124593206180970496',
            '6021340351084089657109340225536',
            '7209762788798054721012499480576',
            '8398185226512019784915658735616',
            '9586607664225984848818817990656',
            '10775030101939949912721977245696',
            '11963452539653914976625136500736',
            '13151874977367880040528295755776',
            '14340297415081845104431455010816',
            '15528719852795810168334614265856',
            '16717142290509775232237773520896',
            '17905564728223740296140932775936',
            '19093987165937705360044092030976',
            '20282409603651670423947251286016',
            '39297168607075111446397799366656',
            '58311927610498552468848347447296',
            '77326686613921993491298895527936',
            '96341445617345434513749443608576',
            '115356204620768875536199991689216',
            '134370963624192316558650539769856',
            '153385722627615757581101087850496',
            '172400481631039198603551635931136',
            '191415240634462639626002184011776',
            '210429999637886080648452732092416',
            '229444758641309521670903280173056',
            '248459517644732962693353828253696',
            '267474276648156403715804376334336',
            '286489035651579844738254924414976',
            '305503794655003285760705472495616',
            '324518553658426726783156020576256',
            '932990841767976839501573559156736',
            '1541463129877526952219991097737216',
            '2149935417987077064938408636317696',
            '2758407706096627177656826174898176',
            '3366879994206177290375243713478656',
            '3975352282315727403093661252059136',
            '4583824570425277515812078790639616',
            '5192296858534827628530496329220096',
            '24663410078040431235519857563795456',
            '44134523297546034842509218798370816',
            '63605636517051638449498580032946176',
            '83076749736557242056487941267521536',
            '706152372760736557480147500773933056',
            '1329227995784915872903807060280344576',
            '340282366920938463463374607431768211456'
        ]) as lower_bound,
        unnest(ARRAY[
            -- Upper bounds
            '604462909807314587353088',
            '309485009821345068724781056',
            '2630622583481433084160638976',
            '4951760157141521099596496896',
            '23520860746422225223083360256',
            '42089961335702929346570223616',
            '60659061924983633470057086976',
            '79228162514264337593543950336',
            '227780967228509970581438857216',
            '376333771942755603569333764096',
            '524886576657001236557228670976',
            '673439381371246869545123577856',
            '821992186085492502533018484736',
            '970544990799738135520913391616',
            '1119097795513983768508808298496',
            '1267650600228229401496703205376',
            '2456073037942194465399862460416',
            '3644495475656159529303021715456',
            '4832917913370124593206180970496',
            '6021340351084089657109340225536',
            '7209762788798054721012499480576',
            '8398185226512019784915658735616',
            '9586607664225984848818817990656',
            '10775030101939949912721977245696',
            '11963452539653914976625136500736',
            '13151874977367880040528295755776',
            '14340297415081845104431455010816',
            '15528719852795810168334614265856',
            '16717142290509775232237773520896',
            '17905564728223740296140932775936',
            '19093987165937705360044092030976',
            '20282409603651670423947251286016',
            '39297168607075111446397799366656',
            '58311927610498552468848347447296',
            '77326686613921993491298895527936',
            '96341445617345434513749443608576',
            '115356204620768875536199991689216',
            '134370963624192316558650539769856',
            '153385722627615757581101087850496',
            '172400481631039198603551635931136',
            '191415240634462639626002184011776',
            '210429999637886080648452732092416',
            '229444758641309521670903280173056',
            '248459517644732962693353828253696',
            '267474276648156403715804376334336',
            '286489035651579844738254924414976',
            '305503794655003285760705472495616',
            '324518553658426726783156020576256',
            '932990841767976839501573559156736',
            '1541463129877526952219991097737216',
            '2149935417987077064938408636317696',
            '2758407706096627177656826174898176',
            '3366879994206177290375243713478656',
            '3975352282315727403093661252059136',
            '4583824570425277515812078790639616',
            '5192296858534827628530496329220096',
            '24663410078040431235519857563795456',
            '44134523297546034842509218798370816',
            '63605636517051638449498580032946176',
            '83076749736557242056487941267521536',
            '706152372760736557480147500773933056',
            '1329227995784915872903807060280344576',
            '340282366920938463463374607431768211456'
        ]) as upper_bound
)
SELECT 
    b.bucket_id,
    c.currency,
    b.lower_bound::numeric as nano_lower_bound,
    b.upper_bound::numeric as nano_upper_bound,
    0 as fiat_lower_bound,  -- These will need to be updated based on current exchange rates
    0 as fiat_upper_bound  -- These will need to be updated based on current exchange rates
FROM currencies c
CROSS JOIN bounds b
ORDER BY c.currency, b.bucket_id;

-- Add comment explaining the data insertion
COMMENT ON TABLE nano_buckets IS 'Stores bucket ranges for nano and fiat currency amounts. Each currency has 64 buckets (0-63) with predefined nano ranges. Fiat ranges should be updated based on current exchange rates.'; 

ALTER TABLE block_confirmations
ADD COLUMN bucket_id INTEGER CHECK (bucket_id >= 0 AND bucket_id <= 63);

-- Create an index for efficient bucket_id lookups
CREATE INDEX idx_block_confirmations_bucket_id ON block_confirmations(bucket_id);


CREATE
OR REPLACE FUNCTION get_bucket_id (raw_nano NUMERIC) RETURNS INTEGER LANGUAGE plpgsql AS $$
DECLARE
    bucket_ranges NUMERIC[] := ARRAY[
        0, 604462909807314587353088, 309485009821345068724781056, 
        2630622583481433084160638976, 4951760157141521099596496896,
        23520860746422225223083360256, 42089961335702929346570223616,
        60659061924983633470057086976, 79228162514264337593543950336,
        227780967228509970581438857216, 376333771942755603569333764096,
        524886576657001236557228670976, 673439381371246869545123577856,
        821992186085492502533018484736, 970544990799738135520913391616,
        1119097795513983768508808298496, 1267650600228229401496703205376,
        2456073037942194465399862460416, 3644495475656159529303021715456,
        4832917913370124593206180970496, 6021340351084089657109340225536,
        7209762788798054721012499480576, 8398185226512019784915658735616,
        9586607664225984848818817990656, 10775030101939949912721977245696,
        11963452539653914976625136500736, 13151874977367880040528295755776,
        14340297415081845104431455010816, 15528719852795810168334614265856,
        16717142290509775232237773520896, 17905564728223740296140932775936,
        19093987165937705360044092030976, 20282409603651670423947251286016,
        39297168607075111446397799366656, 58311927610498552468848347447296,
        77326686613921993491298895527936, 96341445617345434513749443608576,
        115356204620768875536199991689216, 134370963624192316558650539769856,
        153385722627615757581101087850496, 172400481631039198603551635931136,
        191415240634462639626002184011776, 210429999637886080648452732092416,
        229444758641309521670903280173056, 248459517644732962693353828253696,
        267474276648156403715804376334336, 286489035651579844738254924414976,
        305503794655003285760705472495616, 324518553658426726783156020576256,
        932990841767976839501573559156736, 1541463129877526952219991097737216,
        2149935417987077064938408636317696, 2758407706096627177656826174898176,
        3366879994206177290375243713478656, 3975352282315727403093661252059136,
        4583824570425277515812078790639616, 5192296858534827628530496329220096,
        24663410078040431235519857563795456, 44134523297546034842509218798370816,
        63605636517051638449498580032946176, 83076749736557242056487941267521536,
        706152372760736557480147500773933056, 1329227995784915872903807060280344576,
        340282366920938463463374607431768211456
    ];
    lower_idx INTEGER := 1;
    upper_idx INTEGER := array_length(bucket_ranges, 1) - 1;
    mid_idx INTEGER;
BEGIN
    WHILE lower_idx <= upper_idx LOOP
        mid_idx := (lower_idx + upper_idx) / 2;
        IF raw_nano >= bucket_ranges[mid_idx] AND raw_nano < bucket_ranges[mid_idx + 1] THEN
            RETURN mid_idx - 1; -- bucket_id is zero-indexed
        ELSIF raw_nano < bucket_ranges[mid_idx] THEN
            upper_idx := mid_idx - 1;
        ELSE
            lower_idx := mid_idx + 1;
        END IF;
    END LOOP;

    -- If no match is found (unlikely for valid input), raise an error
    RAISE EXCEPTION 'Raw Nano amount % does not fall into any bucket range.', raw_nano;
END;
$$;

-- Create the trigger function
CREATE OR REPLACE FUNCTION set_bucket_id()
RETURNS TRIGGER AS $$
BEGIN
    -- Only set bucket_id for send and receive transactions
    IF NEW.block_subtype IN ('send', 'receive') THEN
        NEW.bucket_id := get_bucket_id(NEW.amount::numeric);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger
CREATE TRIGGER set_bucket_id_trigger
    BEFORE INSERT ON block_confirmations
    FOR EACH ROW
    EXECUTE FUNCTION set_bucket_id();

-- Add comment explaining the trigger
COMMENT ON FUNCTION set_bucket_id() IS 'Trigger function to automatically set bucket_id for send and receive transactions based on their amount';



UPDATE block_confirmations
SET bucket_id = get_bucket_id(balance::numeric)
WHERE block_subtype in ('send', 'receive')
